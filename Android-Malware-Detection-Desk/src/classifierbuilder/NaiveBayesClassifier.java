package classifierbuilder;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;

import androidconstants.Constants;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.core.Instances;
import weka.filters.*;
import weka.filters.unsupervised.attribute.*;


public class NaiveBayesClassifier {
	static int count1=1,count2=1,count3=1,count4=1;
	
    public void naiveBayesOnPermissionsWithCrossValidation() throws Exception,FileNotFoundException,IOException
	{
		BufferedReader datasetReader=null;
		try {
			datasetReader=new BufferedReader(new FileReader(Constants.PERMISSION_DATASET));
			//to load the dataset to the trainer
			Instances classifierTrainer=new Instances(datasetReader);
			//to convert string attribute to numeric(naive bayes cannot accept string attributes)
			StringToWordVector filter=new StringToWordVector();
			filter.setInputFormat(classifierTrainer);
			Instances filteredTrainer=Filter.useFilter(classifierTrainer, filter);
			//to set the class index-class attribute will be put first by the StringToWordVector class
			filteredTrainer.setClassIndex(0);
			datasetReader.close();
			//to write the numeric type arff file
			//BufferedWriter nominalTypeWriter=new BufferedWriter(new FileWriter("nominal.arff"));
			//nominalTypeWriter.write(filteredTrainer.toString());
			//to instantiate the NaiveBayes weka class
			NaiveBayes classifier=new NaiveBayes();
			//to build the classifier with the dataset
			classifier.buildClassifier(filteredTrainer);
			//to define the evaluation model
			Evaluation evaluate=new Evaluation(filteredTrainer);
			//to set the cross validation characteristics
			evaluate.crossValidateModel(classifier, filteredTrainer, 15, new Random(1));
			System.out.println(evaluate.toSummaryString("\n The classification results\n",true));
			//to write the output to a log file
			BufferedWriter outputWriter=new BufferedWriter(new FileWriter(Constants.CROSSVALIDATION_RESULT+"NaiveBayesCrossValidationResultsOnPermissions.log"));
			outputWriter.write(evaluate.toSummaryString());
			outputWriter.close();
			
		} catch (Exception e) {
			
			e.printStackTrace();
		}

  }
	public void naiveBayesOnGenuinePermissionsWithoutCrossValidation() throws Exception,FileNotFoundException,IOException
	{
			BufferedReader dataReader=null;
			
			//training data
			dataReader=new BufferedReader(new FileReader(Constants.PERMISSION_DATASET));
			Instances classifierTrainer=new Instances(dataReader);
			//to convert string attribute to numeric(naive bayes cannot accept string attributes)
			StringToWordVector filter=new StringToWordVector();
			filter.setInputFormat(classifierTrainer);
			Instances filteredTrainer=Filter.useFilter(classifierTrainer, filter);
			//to set the class index-class attribute will be put first by the StringToWordVector class
			filteredTrainer.setClassIndex(0);
			NaiveBayes classifier=new NaiveBayes();
			classifier.buildClassifier(filteredTrainer);
			//test data
			for(File testFile: new File(Constants.ARFFONPERMISSIONGENUINE).listFiles())
			{
                            System.out.println(""+testFile.getName());
				try{
					dataReader=new BufferedReader(new FileReader(testFile));
					Instances classifierTester=new Instances(dataReader);
					//to convert string attribute to numeric(naive bayes cannot accept string attributes)
					StringToWordVector filterTester=new StringToWordVector();
					filterTester.setInputFormat(classifierTester);
					Instances filteredTester=Filter.useFilter(classifierTester, filterTester);
					//to set the class index-class attribute will be put first by the StringToWordVector class
					filteredTester.setClassIndex(0);
					//evaluate the model
					Evaluation evaluate=new Evaluation(filteredTrainer);
					evaluate.evaluateModel(classifier,filteredTester);
					System.out.println(evaluate.toSummaryString("\n The test results\n",false));
//					BufferedWriter outputWriter=new BufferedWriter(new FileWriter(Constants.PERMISSION_RESULTS+"GenuineAppPermssion"+count1+".log"));
                                        
                                        BufferedWriter outputWriter=new BufferedWriter(new FileWriter(Constants.PERMISSION_RESULTS+"permissionfinal.log"));
					outputWriter.write(evaluate.toSummaryString("\n The Test results\n",false));
					outputWriter.flush();
					++count1;
				}catch(Exception e){
					System.out.println("Exception In :"+testFile.getName());
				}
				continue;
			}
			dataReader.close();
			
	}
	public void naiveBayesOnGenuineStringWithoutCrossValidation() throws Exception,FileNotFoundException,IOException
	{
			BufferedReader dataReader=null;
			//training data
			dataReader=new BufferedReader(new FileReader(Constants.STRING_DATASET));
			Instances classifierTrainer=new Instances(dataReader);
			//to convert string attribute to numeric(naive bayes cannot accept string attributes)
			StringToWordVector filter=new StringToWordVector();
			filter.setInputFormat(classifierTrainer);
			Instances filteredTrainer=Filter.useFilter(classifierTrainer, filter);
			//to set the class index-class attribute will be put first by the StringToWordVector class
			filteredTrainer.setClassIndex(0);
			NaiveBayes classifier=new NaiveBayes();
			classifier.buildClassifier(filteredTrainer);
			//test data
			for(File testFile: new File(Constants.ARFFONSTRINGGENUINE).listFiles())
			{ 
                            System.out.println("NaiveBayesOnGenuineStringWithoutCrossValidation"+testFile.getName());
				try{
					dataReader=new BufferedReader(new FileReader(testFile));
					Instances classifierTester=new Instances(dataReader);
					//to convert string attribute to numeric(naive bayes cannot accept string attributes)
					StringToWordVector filterTester=new StringToWordVector();
					filterTester.setInputFormat(classifierTester);
					Instances filteredTester=Filter.useFilter(classifierTester, filterTester);
					//to set the class index-class attribute will be put first by the StringToWordVector class
					filteredTester.setClassIndex(0);
					//evaluate the model
					Evaluation evaluate=new Evaluation(filteredTrainer);
					evaluate.evaluateModel(classifier,filteredTester);
					System.out.println(evaluate.toSummaryString("\n The test results\n",false));
					BufferedWriter outputWriter=new BufferedWriter(new FileWriter(Constants.STRING_GENUINE_RESULTS+"GenuineAppString"+count2+".log"));
					outputWriter.write(evaluate.toSummaryString("\n The Test results\n",false));
					outputWriter.flush();
					++count2;
				}catch(Exception e){
					System.out.println("Exception In :"+testFile.getName());
				}
				continue;
		
			}
			dataReader.close();
			
	}
	public void naiveBayesOnMalwarePermissionsWithoutCrossValidation() throws Exception,FileNotFoundException,IOException
	{
			BufferedReader dataReader=null;
			//training data
			dataReader=new BufferedReader(new FileReader(Constants.PERMISSION_DATASET));
			Instances classifierTrainer=new Instances(dataReader);
			//to convert string attribute to numeric(naive bayes cannot accept string attributes)
			StringToWordVector filter=new StringToWordVector();
			filter.setInputFormat(classifierTrainer);
			Instances filteredTrainer=Filter.useFilter(classifierTrainer, filter);
			//to set the class index-class attribute will be put first by the StringToWordVector class
			filteredTrainer.setClassIndex(0);
			NaiveBayes classifier=new NaiveBayes();
			classifier.buildClassifier(filteredTrainer);
			//test data
			for(File testFile: new File(Constants.ARFFONPERMISSIONMALWARE).listFiles())
			{
                            System.out.println("NaiveBayesOnMalwarePermissionsWithoutCrossValidation : "+testFile.getName());
				try{
					dataReader=new BufferedReader(new FileReader(testFile));
					Instances classifierTester=new Instances(dataReader);
					//to convert string attribute to numeric(naive bayes cannot accept string attributes)
					StringToWordVector filterTester=new StringToWordVector();
					filterTester.setInputFormat(classifierTester);
					Instances filteredTester=Filter.useFilter(classifierTester, filterTester);
					//to set the class index-class attribute will be put first by the StringToWordVector class
					filteredTester.setClassIndex(0);
					//evaluate the model
					Evaluation evaluate=new Evaluation(filteredTrainer);
					evaluate.evaluateModel(classifier,filteredTester);
					System.out.println(evaluate.toSummaryString("\n The test results\n",false));
					BufferedWriter outputWriter=new BufferedWriter(new FileWriter(Constants.PERMISSION_RESULTS+"MalwareAppPermission"+count3+".log"));
					outputWriter.write(evaluate.toSummaryString("\n The Test results\n",false));
					outputWriter.flush();
					++count3;
				}catch(Exception e){
					//Exception
					System.out.println();
				}
				continue;
			}
			dataReader.close();
			
	}
	public void naiveBayesOnMalwareStringWithoutCrossValidation() throws Exception,FileNotFoundException,IOException
	{
			BufferedReader dataReader=null;
			//training data
			dataReader=new BufferedReader(new FileReader(Constants.STRING_DATASET));
			Instances classifierTrainer=new Instances(dataReader);
			//to convert string attribute to numeric(naive bayes cannot accept string attributes)
			StringToWordVector filter=new StringToWordVector();
			filter.setInputFormat(classifierTrainer);
			Instances filteredTrainer=Filter.useFilter(classifierTrainer, filter);
			//to set the class index-class attribute will be put first by the StringToWordVector class
			filteredTrainer.setClassIndex(0);
			NaiveBayes classifier=new NaiveBayes();
			classifier.buildClassifier(filteredTrainer);
			//test data
			for(File testFile: new File(Constants.ARFFONSTRINGMALWARE).listFiles())
			{
                            
				try{
					dataReader=new BufferedReader(new FileReader(testFile));
					Instances classifierTester=new Instances(dataReader);
					//to convert string attribute to numeric(naive bayes cannot accept string attributes)
					StringToWordVector filterTester=new StringToWordVector();
					filterTester.setInputFormat(classifierTester);
					Instances filteredTester=Filter.useFilter(classifierTester, filterTester);
					//to set the class index-class attribute will be put first by the StringToWordVector class
					filteredTester.setClassIndex(0);
					//evaluate the model
					Evaluation evaluate=new Evaluation(filteredTrainer);
					evaluate.evaluateModel(classifier,filteredTester);
					System.out.println(evaluate.toSummaryString("\n The test results\n",false));
					BufferedWriter outputWriter=new BufferedWriter(new FileWriter(Constants.STRING_MALWARE_RESULTS+"MalwareAppString"+count4+".log"));
					outputWriter.write(evaluate.toSummaryString("\n The Test results\n",false));
					outputWriter.flush();
					++count4;
				}catch(Exception e){
					System.out.println("Exception In : "+testFile.getName());
				}
			  continue;
			}
			dataReader.close();	
	}
	public void naiveBayesOnStringsWithCrossValidation() throws Exception,FileNotFoundException,IOException
	{
		BufferedReader datasetReader=null;
		try {
			datasetReader=new BufferedReader(new FileReader(Constants.STRING_DATASET));
			//to load the dataset to the trainer
			Instances classifierTrainer=new Instances(datasetReader);
			//to convert string attribute to numeric(naive bayes cannot accept string attributes)
			StringToWordVector filter=new StringToWordVector();
			filter.setInputFormat(classifierTrainer);
			Instances filteredTrainer=Filter.useFilter(classifierTrainer, filter);
			//to set the class index-class attribute will be put first by the StringToWordVector class
			filteredTrainer.setClassIndex(0);
			datasetReader.close();
			//to write the numeric type arff file
			//BufferedWriter nominalTypeWriter=new BufferedWriter(new FileWriter("nominal.arff"));
			//nominalTypeWriter.write(filteredTrainer.toString());
			//to instantiate the NaiveBayes weka class
			NaiveBayes classifier=new NaiveBayes();
			//to build the classifier with the dataset
			classifier.buildClassifier(filteredTrainer);
			//to define the evaluation model
			Evaluation evaluate=new Evaluation(filteredTrainer);
			//to set the cross validation characteristics
			evaluate.crossValidateModel(classifier, filteredTrainer, 15, new Random(1));
			System.out.println(evaluate.toSummaryString("\n The classification results\n",true));
			//to write the output to a log file
			BufferedWriter outputWriter=new BufferedWriter(new FileWriter(Constants.CROSSVALIDATION_RESULT+"NaiveBayesCrossValidationResultsOnStrings.log"));
			outputWriter.write(evaluate.toSummaryString());
			outputWriter.close();
			
		} catch (Exception e) {
			
			e.printStackTrace();
		}


		
	}

	
}
