/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainGUI.java
 *
 * Created on 27 Mar, 2016, 10:01:14 AM
 */
package android_malware_detection;

import androidappclassifier.DexDecrypt;
import androidconstants.Constants;
import classifierbuilder.J48Classifier;
import classifierbuilder.NaiveBayesClassifier;
import classifierbuilder.NaiveBayesUpdateableClassifier;
import featuresparser.TxtParser;
import featuresparser.XmlParser;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import analysis.ResultAnalysis;
import analysis.ResultBean;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;
import parsexml.AXMLPrinter;
import uncompress.UnCompressAPK;

/**
 *
 * @author Abhinay
 */

public class MainGUI extends javax.swing.JFrame {
    File selectedFile;
    File destFolder, dest;
    /** Creates new form MainGUI */
    public MainGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(-4144960,true));

        jLabel1.setBackground(new java.awt.Color(-20561,true));
        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(-16776961,true));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Android Malware Detection");

        jButton2.setText("Step 1 : Unzip AndroidMainfest.xml and .dex files");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Step 2 : Read XML File & Decrypt");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Step 3 : Read DEX file & Decrypt");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Step 4 : To invoke the xml parser class");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(-8355712,true));
        jLabel2.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton6.setText("Step 5 : To invoke the text parser class");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Step 6 : Apply The Algorithms");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Step 7 : Result Analysis and Collection");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, 0, 0, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE))
                            .addGap(71, 71, 71)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButton1.setText("Browse APK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
    //Adding file filter
        FileFilter filter = new FileNameExtensionFilter("apk file","apk");
        
        JFileChooser jfc = new JFileChooser();
        jfc.setFileFilter(filter);
        
        jfc.showOpenDialog(new MainGUI());
        try {
            selectedFile = jfc.getSelectedFile();
            String workingdir = System.getProperty("user.dir");
            //creating destination folder in temp location
            destFolder = new File(workingdir+"\\InputAPK\\");
            if (!destFolder.exists()) {
               destFolder.mkdir();
            }
            
            //creating destination file name with .apk extension
            dest = new File(destFolder.getAbsolutePath() + "\\" + jfc.getName(jfc.getSelectedFile())+".apk");
            System.out.println(selectedFile.getName());
            jLabel2.setText("Application Name  : "+selectedFile.getName());
            FileUtils.copyFile(selectedFile, dest);
            Constants.APK = selectedFile.getAbsolutePath();
            int pos = selectedFile.getName().lastIndexOf(".");
            Constants.APK_NAME = selectedFile.getName().substring(0,pos);
            System.out.println(Constants.APK_NAME);
            File tempFolder;
            tempFolder = new File(workingdir+"\\" +Constants.APK_NAME);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("Output Folder : "+tempFolder.getAbsolutePath());
                }
            
            //Here Create the folder and change the paths
            Constants.OUTPUTSTEPS = workingdir+"/"+Constants.APK_NAME +"/OutputSteps/";
            tempFolder = new File(Constants.OUTPUTSTEPS);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("OUTPUTSTEPS : "+tempFolder.getAbsolutePath());
                }
            
            Constants.UNCOMPRESSED_APK = Constants.OUTPUTSTEPS +"uncompressed/";
            tempFolder = new File(Constants.UNCOMPRESSED_APK);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("UNCOMPRESSED_APK : "+tempFolder.getAbsolutePath());
                }
            
            Constants.MANIFESTPATH = Constants.OUTPUTSTEPS +"decryptmanifest/";
            tempFolder = new File(Constants.MANIFESTPATH);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("MANIFESTPATH : "+tempFolder.getAbsolutePath());
                }
            
            Constants.ENCRYPT_ANDROIDMAINIFEST = Constants.UNCOMPRESSED_APK +"AndroidManifest.xml";
            System.out.println("ENCRYPT_ANDROIDMAINIFEST : "+Constants.ENCRYPT_ANDROIDMAINIFEST);
            Constants.DECRYPT_ANDROIDMAINIFEST = Constants.MANIFESTPATH +"AndroidManifest.xml";
            System.out.println("DECRYPT_ANDROIDMAINIFEST : "+Constants.DECRYPT_ANDROIDMAINIFEST);
            
            Constants.DEX_DECRYPT_OUTPUT = Constants.OUTPUTSTEPS +"decrypteddex/";
            tempFolder = new File(Constants.DEX_DECRYPT_OUTPUT);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("DEX_DECRYPT_OUTPUT : "+tempFolder.getAbsolutePath());
                }
            
            Constants.Genuine = Constants.OUTPUTSTEPS +"Genuine/";
            tempFolder = new File(Constants.Genuine);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("Genuine : "+tempFolder.getAbsolutePath());
             }
            Constants.Malware = Constants.OUTPUTSTEPS +"Malware/";
            tempFolder = new File(Constants.Malware);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("Malware : "+tempFolder.getAbsolutePath());
             }
            
            Constants.ARFFONPERMISSIONGENUINE = Constants.Genuine +"ARFFOnPermissionsGenuine/";
            tempFolder = new File(Constants.ARFFONPERMISSIONGENUINE);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("ARFFONPERMISSIONGENUINE : "+tempFolder.getAbsolutePath());
             }
            Constants.ARFFONPERMISSIONMALWARE = Constants.Malware +"ARFFOnPermissionsMalware/";
            tempFolder = new File(Constants.ARFFONPERMISSIONMALWARE);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("ARFFONPERMISSIONMALWARE : "+tempFolder.getAbsolutePath());
             }
            
            Constants.ARFFONSTRINGGENUINE = Constants.Genuine +"ARFFOnStringsGenuine/";
            tempFolder = new File(Constants.ARFFONSTRINGGENUINE);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("ARFFONSTRINGGENUINE : "+tempFolder.getAbsolutePath());
             }
            Constants.ARFFONSTRINGMALWARE = Constants.Malware +"ARFFOnStringsMalware/";
            tempFolder = new File(Constants.ARFFONSTRINGMALWARE);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("ARFFONSTRINGMALWARE : "+tempFolder.getAbsolutePath());
             }
            
            Constants.OutputStatistics = workingdir+"/"+Constants.APK_NAME +"/OutputStatistics/";
            tempFolder = new File(Constants.OutputStatistics);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("OutputStatistics : "+tempFolder.getAbsolutePath());
             }
            
            Constants.CROSSVALIDATION_RESULT = Constants.OutputStatistics +"CrossValidationResults/";
            tempFolder = new File(Constants.CROSSVALIDATION_RESULT);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("CROSSVALIDATION_RESULT : "+tempFolder.getAbsolutePath());
             }
            
            Constants.result = Constants.OutputStatistics +"result/";
            tempFolder = new File(Constants.result);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("result : "+tempFolder.getAbsolutePath());
             }
            
            Constants.PERMISSION_RESULTS = Constants.result +"permissions/";
            tempFolder = new File(Constants.PERMISSION_RESULTS);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("PERMISSION_RESULTS : "+tempFolder.getAbsolutePath());
             }
            
            Constants.PERMISSION_FINAL_RESULT = Constants.result +"permissionfinal.log";
            System.out.println("PERMISSION_FINAL_RESULT : "+Constants.PERMISSION_FINAL_RESULT);
            
            Constants.strings = Constants.OutputStatistics +"strings/";
            tempFolder = new File(Constants.strings);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("strings : "+tempFolder.getAbsolutePath());
             }
            
            Constants.STRING_GENUINE_RESULTS = Constants.strings +"genuine/";
            tempFolder = new File(Constants.STRING_GENUINE_RESULTS);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("STRING_GENUINE_RESULTS : "+tempFolder.getAbsolutePath());
             }
            Constants.STRING_MALWARE_RESULTS = Constants.strings +"malware/";
            tempFolder = new File(Constants.STRING_MALWARE_RESULTS);
            if (!tempFolder.exists()) {
                     tempFolder.mkdir();
                      System.out.println("STRING_MALWARE_RESULTS : "+tempFolder.getAbsolutePath());
             }
            
            Constants.STRING_GENUINE_RESULT = Constants.result +"stringgenuine.log";
            System.out.println("STRING_GENUINE_RESULT : "+Constants.STRING_GENUINE_RESULT);
            Constants.STRING_MALWARE_RESULT = Constants.result +"stringmalware.log";
            System.out.println("STRING_MALWARE_RESULT : "+Constants.STRING_MALWARE_RESULT);
            Constants.STRING_FINAL_RESULT = Constants.result +"stringfinal.log";
            System.out.println("STRING_FINAL_RESULT : "+Constants.STRING_FINAL_RESULT);
           //Stops
        } catch (Exception e) {
            e.getMessage();
        }

}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    //Step 1 : Unzip AndroidMainfest.xml and .class files
     System.out.println("Step1 : Unzip AndroidMainfest.xml and .dex files");

     UnCompressAPK uapk = new UnCompressAPK();
     try {
	   if(uapk.unzip(Constants.APK, Constants.UNCOMPRESSED_APK)){
				System.out.println("Uncompressed Apk Successfully");
                                JOptionPane.showMessageDialog(null,"Uncompressed Apk Successfully");
	   }
      } catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
     }
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
          //Step 2 : Read XML File & Decrypt
         System.out.println("Step 2 : Read XML File & Decrypt"); 
         AXMLPrinter printer= new AXMLPrinter(); 
         printer.xmlParser(Constants.ENCRYPT_ANDROIDMAINIFEST,Constants.DECRYPT_ANDROIDMAINIFEST);
         System.out.println("Read  XML File & Decrypted  Successfully");
         JOptionPane.showMessageDialog(null,"Read  XML File & Decrypted  Successfully");
         
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            //Step 3 : Read DEX file & Decrypt
	    System.out.println("Step 3 : Read DEX file & Decrypt");
	    DexDecrypt decrypdex = new DexDecrypt();
	    decrypdex.decryptDex(Constants.UNCOMPRESSED_APK, Constants.DEX_DECRYPT_OUTPUT);
            System.out.println("Read  DEX File & Decrypted  Successfully");
            JOptionPane.showMessageDialog(null,"Read  DEX File & Decrypted  Successfully");
}//GEN-LAST:event_jButton4ActionPerformed

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
                 //Step 4 : To invoke the xml parser class
		 System.out.println("Step 4 : To invoke the xml parser class to generate arff file");
		 XmlParser xp=new XmlParser();
		 try {
			xp.genuinePermissionsParsing();
			xp.malwarePermissionsParsing();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                System.out.println("To invokeD the xml parser class to generated arff file Successfully");
                JOptionPane.showMessageDialog(null,"To invokeD the xml parser class to generated arff file Successfully");
}//GEN-LAST:event_jButton5ActionPerformed

private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
           //Step 5 : To invoke the text parser class
	   System.out.println("Step 5 : To invoke the text parser class to generate arff file");
	
	    TxtParser tp=new TxtParser();
	  
	     try {
		        tp.genuineStringParsing();
			tp.malwareStringParsing();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
            System.out.println("To invoked the text parser class to generated arff file Successfully");
            JOptionPane.showMessageDialog(null,"To invoked the text parser class to generated arff file Successfully");
}//GEN-LAST:event_jButton6ActionPerformed

private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
                //Step 6 : Apply The Algorithms
		 System.out.println("Step 6 : Apply The Algorithms");
		 //naive bayes algorithm invocation
		 NaiveBayesClassifier nbc=new NaiveBayesClassifier();
		 //j48 algorithm invocation
		 J48Classifier j48c=new J48Classifier();
		 //NaiveBayesUpdateable algorithm invlocation
		 NaiveBayesUpdateableClassifier nbs=new NaiveBayesUpdateableClassifier();
		 
		 try {
			//cross validation results on permissions
			//System.out.println("cross validation results on permissions");
			 
			nbc.naiveBayesOnPermissionsWithCrossValidation();
			j48c.j48OnPermissionsWithCrossValidation();
			 
			//individual testing results on permissions
			System.out.println("individual testing results on permissions");
			nbc.naiveBayesOnGenuinePermissionsWithoutCrossValidation();
			
                        //System.out.println("individual testing results on strings");
			nbc.naiveBayesOnGenuineStringWithoutCrossValidation();
			nbc.naiveBayesOnMalwareStringWithoutCrossValidation();
			
			//cross validation results on strings
			//System.out.println("cross validation results on strings");
			//nbs.naiveBayesUpdateableOnStringsWithCrossValidation();
			//nbc.naiveBayesOnStringsWithCrossValidation();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
                System.out.println("Apply the Algorithm Successfully..");
                JOptionPane.showMessageDialog(null,"Apply the Algorithm Successfully");
}//GEN-LAST:event_jButton7ActionPerformed

private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
                         //Step 7 : Result Collection
                         JOptionPane.showMessageDialog(null,"Result Analysis and Collection");
			 System.out.println("Step 7 : Result Collection");
			 ResultAnalysis analysis = new ResultAnalysis();
			 ResultBean permissionresultbean   = analysis.finalResult(Constants.PERMISSION_RESULTS);
		         analysis.getResult(Constants.PERMISSION_FINAL_RESULT,permissionresultbean);	
			 ResultBean genuine   = analysis.stringResult(Constants.STRING_GENUINE_RESULTS);
			 analysis.getResult(Constants.STRING_GENUINE_RESULT,genuine);
			 ResultBean malware   = analysis.stringResult(Constants.STRING_MALWARE_RESULTS);
			 analysis.getResult(Constants.STRING_MALWARE_RESULT,malware);
				
			 ResultBean stringresultbean   = analysis.avgResult(genuine, malware);
			 analysis.getResult(Constants.STRING_FINAL_RESULT,stringresultbean);
                         System.out.println("Result Are Generated In :\n\nPermission : "+Constants.PERMISSION_FINAL_RESULT
                                 +"\n\nStrings : "+Constants.STRING_FINAL_RESULT);
                         //JOptionPane.showMessageDialog(null, "Result Are Generated In :\n\nPermission : "+Constants.PERMISSION_FINAL_RESULT
                          //       +"\n\nStrings : "+Constants.STRING_FINAL_RESULT);
                         new FinalResultAnalysis(permissionresultbean,stringresultbean).show();
		
}//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
