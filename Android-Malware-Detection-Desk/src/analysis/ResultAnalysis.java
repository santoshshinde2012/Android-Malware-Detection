package analysis;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import androidconstants.Constants;

public class ResultAnalysis {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ResultAnalysis analysis = new ResultAnalysis();
		ResultBean permissionresultbean   = analysis.finalResult(Constants.PERMISSION_RESULTS);
		analysis.getResult(Constants.PERMISSION_FINAL_RESULT,permissionresultbean);
		
		ResultBean genuine   = analysis.stringResult(Constants.STRING_GENUINE_RESULTS);
		analysis.getResult(Constants.STRING_GENUINE_RESULT,genuine);
		ResultBean malware   = analysis.stringResult(Constants.STRING_MALWARE_RESULTS);
		analysis.getResult(Constants.STRING_MALWARE_RESULT,malware);
		
		ResultBean stringresultbean   = analysis.avgResult(genuine, malware);
		analysis.getResult(Constants.STRING_FINAL_RESULT,stringresultbean);
	}
	public void getResult(String filename,ResultBean resultbean){
		//String content = resultbean.toString() ;
		String content = "" ;
		content += "\n                           Final Result\n";
		content += "\nTotal Number Of Instances        : "+resultbean.getTotal_number_of_instances();
		content += "\nCorrectly Classified Instances   : "+resultbean.getCorrectly_classified_instances();
		content += "\nIncorrectly Classified Instances : "+resultbean.getIncorrectly_classified_instances();
		content += "\nKappa Statistic                  : "+resultbean.getKappa_statistic();
		content += "\nMean Absolute Error              : "+resultbean.getMean_absolute_error();
		content += "\nRoot Mean Squared Error          : "+resultbean.getRoot_mean_squared_error();
		content += "\nRelative Absolute Error          : "+resultbean.getRelative_absolute_error()+"%";
		content += "\nRoot Relative Squared Error      : "+resultbean.getRoot_relative_squared_error()+"%";
		try {
			File file = new File(filename);

			// if file doesnt exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(content);
			bw.close();

			System.out.println("Done");

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public ResultBean finalResult(String folderpath){
		BufferedReader dataReader=null;
		String sCurrentLine = null;
		boolean flag = false ;
		boolean elementsatus = false ;
		ArrayList<ResultBean> resulset = new ArrayList<ResultBean>();
		for(File testFile: new File(folderpath).listFiles()){
			try {
				dataReader=new BufferedReader(new FileReader(testFile));
				int linenumber = 1;
				ResultBean resultbean = new ResultBean();
				while ((sCurrentLine = dataReader.readLine()) != null) {
					//System.out.println(sCurrentLine);
					if(linenumber==4){
						if(sCurrentLine.contains("Total Number of Instances") ){
							//System.out.println(sCurrentLine);
							resultbean.setCorrectly_classified_instances("0");
							resultbean.setIncorrectly_classified_instances("0");
							resultbean.setKappa_statistic("0");
							resultbean.setMean_absolute_error("0");
							resultbean.setRoot_mean_squared_error("0");
							resultbean.setRelative_absolute_error("0");
							resultbean.setRoot_relative_squared_error("0");
							resultbean.setTotal_number_of_instances("0");
							flag = true;
						}else{
							flag = false;
							Scanner tokenize = new Scanner(sCurrentLine);
							int tokennumber = 1;
							while (tokenize.hasNext()) {
								String temp_token = tokenize.next();
								if(tokennumber == 4){
									resultbean.setCorrectly_classified_instances(temp_token);
									//System.out.println(temp_token);
								}
								tokennumber++;
							}
						}
						
					}else if(linenumber==5){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 4){
								resultbean.setIncorrectly_classified_instances(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==6){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 3){
								resultbean.setKappa_statistic(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==7){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 4){
								resultbean.setMean_absolute_error(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==8){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 5){
								resultbean.setRoot_mean_squared_error(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==9){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 4){
								resultbean.setRelative_absolute_error(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==10){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 5){
								resultbean.setRoot_relative_squared_error(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==11){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 5){
								resultbean.setTotal_number_of_instances(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					
					  
			    	linenumber++;
				}
				if(flag == false){
				  elementsatus = true;
				  resulset.add(resultbean);
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
				System.out.println("Exception In :"+testFile.getName());
			}
		}
		try {
			dataReader.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		ResultBean finalresult = new ResultBean();
		
		double double_correctly_classified_instances   = 0;
		double double_kappa_statistic                  = 0;
		double double_incorrectly_classified_instances = 0;
		double double_mean_absolute_error              = 0;
		double double_root_mean_squared_error          = 0;
		double double_relative_absolute_error          = 0;
		double double_root_relative_squared_error      = 0;
		double double_total_number_of_instances        = 0;
		
		int correctly_classified_instances   = 0;
		int incorrectly_classified_instances = 0;
		int total_number_of_instances        = 0;
		
        if(elementsatus == true){
	    	 for(ResultBean elem : resulset){
	 	        System.out.println(elem.toString());
	 	        double_correctly_classified_instances += Double.parseDouble(elem.getCorrectly_classified_instances());
	 	        double_kappa_statistic += Double.parseDouble(elem.getKappa_statistic());
	 	        double_incorrectly_classified_instances += Double.parseDouble(elem.getIncorrectly_classified_instances());
	 	        double_mean_absolute_error += Double.parseDouble(elem.getMean_absolute_error());
	 	        double_root_mean_squared_error += Double.parseDouble(elem.getRoot_mean_squared_error());
	 	        double_relative_absolute_error += Double.parseDouble(elem.getRelative_absolute_error());
	 	        double_root_relative_squared_error += Double.parseDouble(elem.getRoot_relative_squared_error());
	 	        double_total_number_of_instances += Double.parseDouble(elem.getTotal_number_of_instances());
	 			
	 	    }
	 		 int averagefactor = resulset.size();
	
	 		 correctly_classified_instances     = (int) (double_correctly_classified_instances/averagefactor);
	 		 double_kappa_statistic             = (double_kappa_statistic/averagefactor);
	 		 incorrectly_classified_instances   = (int) (double_incorrectly_classified_instances/averagefactor);
	 		 double_mean_absolute_error         = (double_mean_absolute_error/averagefactor);
	 		 double_root_mean_squared_error     = (double_root_mean_squared_error/averagefactor);
	 		 double_relative_absolute_error     = (double_relative_absolute_error/averagefactor);
	 		 double_root_relative_squared_error = (double_root_relative_squared_error/averagefactor);
	 		 total_number_of_instances          = (int) (double_total_number_of_instances/averagefactor);
 		     if(averagefactor >=2){
                        if(double_correctly_classified_instances % 2 != 0 && double_incorrectly_classified_instances%2 ==0){
	         	      correctly_classified_instances += 1;
	         	      //total_number_of_instances      += 1;
	 		 }else if(double_correctly_classified_instances % 2 == 0 && double_incorrectly_classified_instances%2 !=0){
	 			 incorrectly_classified_instances += 1;
	         	 //total_number_of_instances        += 1;
	 		 }else if(double_correctly_classified_instances % 2 != 0 && double_incorrectly_classified_instances%2 !=0){
	 			 correctly_classified_instances   += 1;
	         	 //total_number_of_instances        += 1;
	 		 }
                     }
	          
		}
		
		 
		finalresult.setCorrectly_classified_instances(String.valueOf(correctly_classified_instances));
		finalresult.setIncorrectly_classified_instances(String.valueOf(incorrectly_classified_instances));
		finalresult.setKappa_statistic(String.valueOf(double_kappa_statistic));
		finalresult.setMean_absolute_error(String.valueOf(double_mean_absolute_error));
		finalresult.setRelative_absolute_error(String.valueOf(double_relative_absolute_error));
		finalresult.setRoot_mean_squared_error(String.valueOf(double_root_mean_squared_error));
		finalresult.setRoot_relative_squared_error(String.valueOf(double_root_relative_squared_error));
		finalresult.setTotal_number_of_instances(String.valueOf(total_number_of_instances));
		
		System.out.println(finalresult.toString());
		return finalresult;
	}
	public ResultBean stringResult(String folderpath){
		BufferedReader dataReader=null;
		String sCurrentLine = null;
		boolean flag = false ;
		boolean elementsatus = false ;
		ArrayList<ResultBean> resulset = new ArrayList<ResultBean>();
		for(File testFile: new File(folderpath).listFiles()){
			try {
				dataReader=new BufferedReader(new FileReader(testFile));
				int linenumber = 1;
				ResultBean resultbean = new ResultBean();
				while ((sCurrentLine = dataReader.readLine()) != null) {
					//System.out.println(sCurrentLine);
					if(linenumber==4){
						if(sCurrentLine.contains("Total Number of Instances") ){
							//System.out.println(sCurrentLine);
							resultbean.setCorrectly_classified_instances("0");
							resultbean.setIncorrectly_classified_instances("0");
							resultbean.setKappa_statistic("0");
							resultbean.setMean_absolute_error("0");
							resultbean.setRoot_mean_squared_error("0");
							resultbean.setRelative_absolute_error("0");
							resultbean.setRoot_relative_squared_error("0");
							resultbean.setTotal_number_of_instances("0");
							flag = true;
						}else{
							flag = false;
							Scanner tokenize = new Scanner(sCurrentLine);
							int tokennumber = 1;
							while (tokenize.hasNext()) {
								String temp_token = tokenize.next();
								if(tokennumber == 4){
									resultbean.setCorrectly_classified_instances(temp_token);
									//System.out.println(temp_token);
								}
								tokennumber++;
							}
						}
						
					}else if(linenumber==5){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 4){
								resultbean.setIncorrectly_classified_instances(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==6){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 3){
								resultbean.setKappa_statistic(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==7){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 4){
								resultbean.setMean_absolute_error(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==8){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 5){
								resultbean.setRoot_mean_squared_error(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==9){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 4){
								resultbean.setRelative_absolute_error(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==10){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 5){
								resultbean.setRoot_relative_squared_error(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					else if(linenumber==11){
						Scanner tokenize = new Scanner(sCurrentLine);
						int tokennumber = 1;
						while (tokenize.hasNext()) {
							String temp_token = tokenize.next();
							if(tokennumber == 5){
								resultbean.setTotal_number_of_instances(temp_token);
								//System.out.println(temp_token);
							}
							tokennumber++;
						}
					}
					
					  
			    	linenumber++;
				}
				if(flag == false){
				  elementsatus = true;
				  resulset.add(resultbean);
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
				System.out.println("Exception In :"+testFile.getName());
			}
		}
		try {
			dataReader.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		ResultBean finalresult = new ResultBean();
		
		double double_correctly_classified_instances   = 0;
		double double_kappa_statistic                  = 0;
		double double_incorrectly_classified_instances = 0;
		double double_mean_absolute_error              = 0;
		double double_root_mean_squared_error          = 0;
		double double_relative_absolute_error          = 0;
		double double_root_relative_squared_error      = 0;
		double double_total_number_of_instances        = 0;
		
		int correctly_classified_instances   = 0;
		int incorrectly_classified_instances = 0;
		int total_number_of_instances        = 0;
		
        if(elementsatus == true){
	    	 for(ResultBean elem : resulset){
	 	        System.out.println(elem.toString());
	 	        double_correctly_classified_instances += Double.parseDouble(elem.getCorrectly_classified_instances());
	 	        double_kappa_statistic += Double.parseDouble(elem.getKappa_statistic());
	 	        double_incorrectly_classified_instances += Double.parseDouble(elem.getIncorrectly_classified_instances());
	 	        double_mean_absolute_error += Double.parseDouble(elem.getMean_absolute_error());
	 	        double_root_mean_squared_error += Double.parseDouble(elem.getRoot_mean_squared_error());
	 	        double_relative_absolute_error += Double.parseDouble(elem.getRelative_absolute_error());
	 	        double_root_relative_squared_error += Double.parseDouble(elem.getRoot_relative_squared_error());
	 	        double_total_number_of_instances += Double.parseDouble(elem.getTotal_number_of_instances());
	 			
	 	    }
	 		 int averagefactor = resulset.size();
	
	 		 correctly_classified_instances     = (int) (double_correctly_classified_instances);
	 		 double_kappa_statistic             = (double_kappa_statistic/averagefactor);
	 		 incorrectly_classified_instances   = (int) (double_incorrectly_classified_instances);
	 		 double_mean_absolute_error         = (double_mean_absolute_error/averagefactor);
	 		 double_root_mean_squared_error     = (double_root_mean_squared_error/averagefactor);
	 		 double_relative_absolute_error     = (double_relative_absolute_error/averagefactor);
	 		 double_root_relative_squared_error = (double_root_relative_squared_error/averagefactor);
	 		 total_number_of_instances          = (int) (double_total_number_of_instances);
 		   
	         if( double_relative_absolute_error > 100){
	        	 double_relative_absolute_error = 100 ;
	         }
	         if( double_root_relative_squared_error > 100){
	        	 double_root_relative_squared_error = 100 ;
	         }
		}
		
		 
		finalresult.setCorrectly_classified_instances(String.valueOf(correctly_classified_instances));
		finalresult.setIncorrectly_classified_instances(String.valueOf(incorrectly_classified_instances));
		finalresult.setKappa_statistic(String.valueOf(double_kappa_statistic));
		finalresult.setMean_absolute_error(String.valueOf(double_mean_absolute_error));
		finalresult.setRelative_absolute_error(String.valueOf(double_relative_absolute_error));
		finalresult.setRoot_mean_squared_error(String.valueOf(double_root_mean_squared_error));
		finalresult.setRoot_relative_squared_error(String.valueOf(double_root_relative_squared_error));
		finalresult.setTotal_number_of_instances(String.valueOf(total_number_of_instances));
		
		System.out.println(finalresult.toString());
		return finalresult;
	}

	public ResultBean avgResult(ResultBean genuine,ResultBean malware){
		ResultBean avgresult = new ResultBean();
		double double_correctly_classified_instances   = 0;
		double double_kappa_statistic                  = 0;
		double double_incorrectly_classified_instances = 0;
		double double_mean_absolute_error              = 0;
		double double_root_mean_squared_error          = 0;
		double double_relative_absolute_error          = 0;
		double double_root_relative_squared_error      = 0;
		double double_total_number_of_instances        = 0;
		
		int correctly_classified_instances   = 0;
		int incorrectly_classified_instances = 0;
		int total_number_of_instances        = 0;
		
		double_correctly_classified_instances = Double.parseDouble(genuine.getCorrectly_classified_instances()) 
				                              + Double.parseDouble(malware.getCorrectly_classified_instances());
	    double_kappa_statistic = Double.parseDouble(genuine.getKappa_statistic())
	    		                + Double.parseDouble(malware.getKappa_statistic());
	    double_incorrectly_classified_instances = Double.parseDouble(genuine.getIncorrectly_classified_instances())
	    		                                + Double.parseDouble(malware.getIncorrectly_classified_instances());
	    double_mean_absolute_error = Double.parseDouble(genuine.getMean_absolute_error())
	    		                   +  Double.parseDouble(malware.getMean_absolute_error());
	    double_root_mean_squared_error = Double.parseDouble(genuine.getRoot_mean_squared_error()) 
	    		                       + Double.parseDouble(malware.getRoot_mean_squared_error());
	    		
	    double_relative_absolute_error = Double.parseDouble(genuine.getRelative_absolute_error())
	    		                       + Double.parseDouble(malware.getRelative_absolute_error());
	    double_root_relative_squared_error = Double.parseDouble(genuine.getRoot_relative_squared_error())
	    		                           + Double.parseDouble(malware.getRoot_relative_squared_error());
	    double_total_number_of_instances = Double.parseDouble(genuine.getTotal_number_of_instances())
	    		                          + Double.parseDouble(malware.getTotal_number_of_instances());
	    int averagefactor = 2;
		
		 correctly_classified_instances     = (int) (double_correctly_classified_instances/averagefactor);
		 double_kappa_statistic             = (double_kappa_statistic/averagefactor);
		 incorrectly_classified_instances   = (int) (double_incorrectly_classified_instances/averagefactor);
		 double_mean_absolute_error         = (double_mean_absolute_error/averagefactor);
		 double_root_mean_squared_error     = (double_root_mean_squared_error/averagefactor);
		 double_relative_absolute_error     = (double_relative_absolute_error/averagefactor);
		 double_root_relative_squared_error = (double_root_relative_squared_error/averagefactor);
		 total_number_of_instances          = (int) (double_total_number_of_instances/averagefactor);
	
         if(double_correctly_classified_instances % 2 != 0 && double_incorrectly_classified_instances%2 ==0){
        	 correctly_classified_instances += 1;
        	 //total_number_of_instances      += 1;
		 }else if(double_correctly_classified_instances % 2 == 0 && double_incorrectly_classified_instances%2 !=0){
			 incorrectly_classified_instances += 1;
        	 //total_number_of_instances        += 1;
		 }else if(double_correctly_classified_instances % 2 != 0 && double_incorrectly_classified_instances%2 !=0){
			 correctly_classified_instances   += 1;
        	 //total_number_of_instances        += 1;
		 }
         
         if( double_relative_absolute_error > 100){
        	 double_relative_absolute_error = 100 ;
         }
         if( double_root_relative_squared_error > 100){
        	 double_root_relative_squared_error = 100 ;
         }
         avgresult.setCorrectly_classified_instances(String.valueOf(correctly_classified_instances));
         avgresult.setIncorrectly_classified_instances(String.valueOf(incorrectly_classified_instances));
         avgresult.setKappa_statistic(String.valueOf(double_kappa_statistic));
         avgresult.setMean_absolute_error(String.valueOf(double_mean_absolute_error));
         avgresult.setRelative_absolute_error(String.valueOf(double_relative_absolute_error));
         avgresult.setRoot_mean_squared_error(String.valueOf(double_root_mean_squared_error));
         avgresult.setRoot_relative_squared_error(String.valueOf(double_root_relative_squared_error));
         avgresult.setTotal_number_of_instances(String.valueOf(total_number_of_instances));
 		
 		System.out.println(avgresult.toString());
		return avgresult;
	}
 
}
